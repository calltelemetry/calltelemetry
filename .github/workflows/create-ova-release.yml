name: Create OVA Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "OVA Release version (e.g., X.Y.Z-rcN)"
        required: true
        type: string
      web_version:
        description: "Web/API version (leave empty to use version above)"
        required: false
        type: string
      vue_version:
        description: "Vue frontend version (leave empty to use version above)"
        required: false
        type: string
      traceroute_version:
        description: "Traceroute version (leave empty for latest)"
        required: false
        type: string
        default: "0.7.3"

jobs:
  create-ova-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate OVA docker-compose file
        run: |
          VERSION="${{ inputs.version }}"
          WEB_VERSION="${{ inputs.web_version }}"
          VUE_VERSION="${{ inputs.vue_version }}"
          TRACEROUTE_VERSION="${{ inputs.traceroute_version }}"

          # Use main version if specific versions not provided
          if [[ -z "$WEB_VERSION" ]]; then
            WEB_VERSION="$VERSION"
          fi
          if [[ -z "$VUE_VERSION" ]]; then
            VUE_VERSION="$VERSION"
          fi
          if [[ -z "$TRACEROUTE_VERSION" ]]; then
            TRACEROUTE_VERSION="0.7.3"
          fi

          echo "🐳 Creating OVA release $VERSION with:"
          echo "  - Web/API: $WEB_VERSION"
          echo "  - Vue Frontend: $VUE_VERSION"
          echo "  - Traceroute: $TRACEROUTE_VERSION"

          # Create the version-specific docker-compose file
          mkdir -p ova/versions
          cat > ova/versions/$VERSION.yaml << EOF
          version: "3.8"

          services:
            caddy:
              image: caddy:2-alpine
              ports:
                - "443:443"
              volumes:
                - ./Caddyfile:/etc/caddy/Caddyfile
                - ./certs:/certs:ro
              networks:
                - ct

            vue-web:
              image: "calltelemetry/vue:$VUE_VERSION"
              restart: "always"
              expose:
                - "80"
              networks:
                - ct

            traceroute:
              image: "calltelemetry/traceroute:$TRACEROUTE_VERSION"
              user: root
              expose:
                - "4100"
              networks:
                - ct

            db:
              image: "bitnamilegacy/postgresql:14"
              user: root
              restart: "always"
              environment:
                - POSTGRES_USER=calltelemetry
                - POSTGRES_PASSWORD=postgres
                - POSTGRES_DB=calltelemetry_prod
              expose:
                - "5432"
              volumes:
                - ./postgres-data:/bitnami/postgresql
              networks:
                - ct

            web:
              image: "calltelemetry/web:$WEB_VERSION"
              restart: "always"
              user: root
              expose:
                - 4000
                - 4080
              ports:
                - "80:4080"
                - "22:3022"
              environment:
                - DB_USER=calltelemetry
                - DB_PASSWORD=postgres
                - DB_HOSTNAME=db
                - DB_NAME=calltelemetry_prod
                - DB_PORT=5432
                - EXTERNAL_IP=\$DEFAULT_IPV4
                - LOGGING_LEVEL=warning
                - ADMIN_NODE=TRUE
                - WORKER_NODE=TRUE
                - CERT_KEY=/home/app/cert/appliance_key.pem
                - CERT_PUBLIC=/home/app/cert/appliance.crt
                - HTTP_ADAPTER=HACKNEY
                - LOG_PATH=/var/log
              tmpfs:
                - /var/log:rw,mode=0555,size=5000m
              networks:
                - ct
              volumes:
                - ./certs:/home/app/cert:rw
              logging:
                driver: "json-file"
                options:
                  max-size: "100m"
                  max-file: "7"
                  compress: "true"

            nats:
              image: "nats:2.11"
              command: "-c /etc/nats/nats.conf"
              volumes:
                - ./nats.conf:/etc/nats/nats.conf
              expose:
                - "4222"
              networks:
                - ct

          networks:
            ct:

          volumes:
            certs:
              driver: local
            traefik-logs:
              driver: local
          EOF

          echo "✅ Generated ova/versions/$VERSION.yaml"

      - name: Commit and create release
        run: |
          VERSION="${{ inputs.version }}"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add and commit the new version file
          git add ova/versions/$VERSION.yaml
          git commit -m "feat: add OVA release $VERSION

          Docker compose configuration for OVA deployment.

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

          # Push the commit
          git push

          # Create GitHub release with the docker-compose file
          gh release create "$VERSION" \
            --title "CallTelemetry OVA $VERSION" \
            --notes "Docker compose configuration for OVA deployment with version-specific service images." \
            ova/versions/$VERSION.yaml

          echo "✅ Created release $VERSION"
          echo "📦 Docker compose file: ova/versions/$VERSION.yaml"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
